{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SensorLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sh-web-app-dev-sensor"
      }
    },
    "ListUnderscorereadingsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sh-web-app-dev-list_readings"
      }
    },
    "AutoUnderscorepopulateUnderscoredbLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sh-web-app-dev-auto_populate_db"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "sh-web-app",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sh-web-app-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sh-web-app-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "sh-web-app",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SensorLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sh-web-app/dev/1621682908471-2021-05-22T11:28:28.471Z/sensor.zip"
        },
        "Handler": "src/sensor/list.list_s",
        "Runtime": "python3.6",
        "FunctionName": "sh-web-app-dev-sensor",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "ENV": "dev",
            "APP_NAME": "sh-dev",
            "BUCKET_NAME": "sh-dev",
            "DEPLOYMENT_BUCKET": "sh-deployment-bucket-dev",
            "RDS_ENDPOINT_STR": "postgresql+psycopg2://postgres:Admin123@smarthelio-dev.cynjegoatv2n.us-east-1.rds.amazonaws.com:5432/smarthelio_dev",
            "ACCOUNT_ID": "711380493766"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SensorLogGroup"
      ]
    },
    "ListUnderscorereadingsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sh-web-app/dev/1621682908471-2021-05-22T11:28:28.471Z/list_readings.zip"
        },
        "Handler": "src/readings/list.list_r",
        "Runtime": "python3.6",
        "FunctionName": "sh-web-app-dev-list_readings",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "ENV": "dev",
            "APP_NAME": "sh-dev",
            "BUCKET_NAME": "sh-dev",
            "DEPLOYMENT_BUCKET": "sh-deployment-bucket-dev",
            "RDS_ENDPOINT_STR": "postgresql+psycopg2://postgres:Admin123@smarthelio-dev.cynjegoatv2n.us-east-1.rds.amazonaws.com:5432/smarthelio_dev",
            "ACCOUNT_ID": "711380493766"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ListUnderscorereadingsLogGroup"
      ]
    },
    "AutoUnderscorepopulateUnderscoredbLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sh-web-app/dev/1621682908471-2021-05-22T11:28:28.471Z/auto_populate_db.zip"
        },
        "Handler": "src/automation_scripts/populate_sensor_data.populate_reading_data",
        "Runtime": "python3.6",
        "FunctionName": "sh-web-app-dev-auto_populate_db",
        "MemorySize": 1024,
        "Timeout": 60,
        "Environment": {
          "Variables": {
            "ENV": "dev",
            "APP_NAME": "sh-dev",
            "BUCKET_NAME": "sh-dev",
            "DEPLOYMENT_BUCKET": "sh-deployment-bucket-dev",
            "RDS_ENDPOINT_STR": "postgresql+psycopg2://postgres:Admin123@smarthelio-dev.cynjegoatv2n.us-east-1.rds.amazonaws.com:5432/smarthelio_dev",
            "ACCOUNT_ID": "711380493766"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AutoUnderscorepopulateUnderscoredbLogGroup"
      ]
    },
    "SensorLambdaVersionBYZP1PJA4frgCM5kJtcKn0MW35zMgYxdO1cBHkTA8Gs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SensorLambdaFunction"
        },
        "CodeSha256": "e5jxxSZJlPlNtZQkgmsKePFqovILaRnn63YYXYAQpwI="
      }
    },
    "ListUnderscorereadingsLambdaVersionf3ri3Iyly3UZuZgLyWKTdVnDnLHrezEBnMPdf4bEuI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ListUnderscorereadingsLambdaFunction"
        },
        "CodeSha256": "e5jxxSZJlPlNtZQkgmsKePFqovILaRnn63YYXYAQpwI="
      }
    },
    "AutoUnderscorepopulateUnderscoredbLambdaVersion6ceFDUij52GXnF1nFPhrgK3KsaV1tYq8qSybYNqLGUw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AutoUnderscorepopulateUnderscoredbLambdaFunction"
        },
        "CodeSha256": "e5jxxSZJlPlNtZQkgmsKePFqovILaRnn63YYXYAQpwI="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-sh-web-app",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "SensorLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SensorLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSensor": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SensorLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 29000
      }
    },
    "HttpApiRouteGetSensorList": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /sensor/list",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSensor"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSensor"
    },
    "ListUnderscorereadingsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ListUnderscorereadingsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationListUnderscorereadings": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ListUnderscorereadingsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 29000
      }
    },
    "HttpApiRoutePostReadingsGet": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /readings/get",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationListUnderscorereadings"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationListUnderscorereadings"
    },
    "AutoUnderscorepopulateUnderscoredbLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AutoUnderscorepopulateUnderscoredbLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationAutoUnderscorepopulateUnderscoredb": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "AutoUnderscorepopulateUnderscoredbLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 29000
      }
    },
    "HttpApiRouteGetDataPopulate": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /data/populate",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationAutoUnderscorepopulateUnderscoredb"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationAutoUnderscorepopulateUnderscoredb"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-sh-web-app-dev-ServerlessDeploymentBucketName"
      }
    },
    "SensorLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SensorLambdaVersionBYZP1PJA4frgCM5kJtcKn0MW35zMgYxdO1cBHkTA8Gs"
      },
      "Export": {
        "Name": "sls-sh-web-app-dev-SensorLambdaFunctionQualifiedArn"
      }
    },
    "ListUnderscorereadingsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ListUnderscorereadingsLambdaVersionf3ri3Iyly3UZuZgLyWKTdVnDnLHrezEBnMPdf4bEuI"
      },
      "Export": {
        "Name": "sls-sh-web-app-dev-ListUnderscorereadingsLambdaFunctionQualifiedArn"
      }
    },
    "AutoUnderscorepopulateUnderscoredbLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AutoUnderscorepopulateUnderscoredbLambdaVersion6ceFDUij52GXnF1nFPhrgK3KsaV1tYq8qSybYNqLGUw"
      },
      "Export": {
        "Name": "sls-sh-web-app-dev-AutoUnderscorepopulateUnderscoredbLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-sh-web-app-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-sh-web-app-dev-HttpApiUrl"
      }
    }
  }
}